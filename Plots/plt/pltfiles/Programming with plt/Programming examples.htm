<html>

<head>
<title>Programming examples</title>

<style>
<!--
h3 { color: #009988 }
span.mcode
{ color: #ff0000;
  font-family: 'Lucida Console', 'Andale Mono', 'Courier New', monospace;
}
-->
</style>
</head>
<body>

<img src="../images/plt.png" width="300" height="160" align="right"></td>
<br><h1>Programming examples</h1> <br clear="left"><br><br>

In the demo folder you will find 25 example programs to help you learn 
how to take advantage of many of plt's features. Also included in the demo 
folder is <span class="mcode">demoplt.m</span>, a script which makes it easy to 
start any of the example programs by clicking on the appropriate button or to run all of
them in sequence (in the order listed below) 
by clicking the &quot;<i><b>All&nbsp;Demos</b></i>&quot; button.
<br>
<img src="../demoImages/demoplt.png" align="left" vspace="10" hspace="5">
I strongly recommend running through the <i><b>All&nbsp;Demos</b></i> sequence at least once.
Many of the questions emailed to me about plt are something like
"can plt do xxxxx?", but if they had only clicked through the <i><b>All&nbsp;Demos</b></i>
sequence once, most likely they would quickly discover that the answer to this question was "yes".
Running demoplt is also a good way to verify that plt is working as properly on your system.
Just type <span class="mcode">cd&nbsp;plt\demo</span>&nbsp; and then <span class="mcode">
demoplt</span> at the command prompt. (The cd command is not necessary if you have added 
the plt\demo folder to the Matlab path).
<br><br>
<span class="mcode">plt5.m</span> is first on the list because it is the simplest most basic
example. The other demos appear in alphabetical order. As each demo
is run, you may peruse the code for the demo program currently being
run in the demoplt list box. Use the list box scroll bars to view any
portion of the code of interest. If the text is to big or small for
comfort, adjust the fontsize using the fontsize popup menu in the
lower right corner of the demoplt figure. This fontsize is saved
(in <span class="mcode">demoplt.mat</span>) along with the current figure colors and screen
location so that the figure will look the same the next time demoplt
is started. (Delete demoplt.mat to return to the original default
conditions.)
<br><br>
If you are running a version of Matlab older than 7.0 then the gui1 button
is replaced by the gui1v6 button. gui1.m uses a uitable which aren't supported
in Matlab 6, so gui1v6 replaces the uitable with a radio button.
Similarly gui2 is replaced by gui2v6 if you are running a version of Matlab
older than 7.0 or if you are running version 8.4 (R2014b). gui2 uses a uipanel
which isn't supported in Matlab 6, so gui2v6 replaces the uipanel with a
uicontrol frame which serves pretty much the same function. R2014b supports
the uipanel, but the v6 version is run because of a bug in R2014b relating to
the stacking order of a uipanel.
<br><br>
In addition to its main role as a demo program launcher, demoplt
demonstrates the use of one of plt's pseudo objects, namely the
ColorPick window. (Note: A pseudo object is a collection of more
primitive Matlab objects, assembled together to perform a common
objective.) The ColorPick pseudo object is useful whenever you want
to allow the user to have control over the color of one of the graphic
elements. In demoplt there are 4 such elements: The text color, the
text background color, the button color, and the figure background
color. The ColorPick window is activated when you left or right click
on any of the 4 text labels near the bottom of the figure, or any of
the uicontrol objects adjacent to these labels. (A right click on
the figure background edit box will bring up the ColorPick window).
When the ColorPick window appears you can use the sliders or the color
patches to change the color of the respective graphic element. For more
details, see the <a href="Pseudo%20objects.htm">Pseudo objects</a> section
in the help file.
<br><br>
An optional feature of the ColorPick object is the color change
callback function (a function to be called whenever a new color is
selected). This feature is demonstrated here by assigning the color
change callback to "demoplt(0)". The callback function is used to
"animate" the figure by briefly modifying the listbox fontsize.
This particular animation is certainly not useful (see line 111 to
disable it), but is there merely to demonstrate how to use the callback.
<br><br>
Although it's unrelated to plt, demoplt also demonstrates the use of
the close request function, which in this example is assigned to
demoplt(1) and is used to save the currently selected colors and
screen position to a setup file (demoplt.mat).

<h2><font color="#dd8800"><i>CLICK on the thumbnails below to see the full size image</i></font></h2>

<table border="1" cellpadding="6" cellspacing="0" vspace="12" hspace="0" bordercolor="#9999ff">
  <tr>
    <td valign="top"> <h3>plt5.m</h3>
        <a href=../demoImages/plt5.png> <img src=../demoImages/plt5T.png></a> </td>
    <td>This is a simple script which creates a plot containing 5 traces. Hopefully you have
        already been running this script while following through the earlier sections.
    <ul>
      <li>Note how the five y-vectors are combined to form a single plt argument.</li>
      <li>Note the use of the <span class="mcode">'Xlim'</span> and
      <span class="mcode">'Ylim'</span> arguments to control the initial axis 
      limits.
      <li>Note the use of <span class="mcode">'FigName'</span>to name the figure 
      that contains the plot
      <li>Note the use of&nbsp; <span class="mcode">'LabelX'</span> argument to 
      assign a label for the x axis.
      <li>Note the use of the <span class="mcode">'LabelY'</span> argument to 
      add a label for both the left and right-hand axes.
    </ul>
    Note that plt will use a right-hand axis since two labels were included in 
    the <span class="mcode">LabelY</span> parameter. Usually the <span class="mcode">
    'Right'</span> parameter is included to specify which traces are to use the 
    right axis, but in this example the parameter was omitted, so plt defaults to 
    putting just the last trace on the right-hand axis.
    </td>
  </tr>

  <tr>
    <td valign="top"> <h3>bounce.m</h3>
        <a href=../demoImages/bounce.png> <img src=../demoImages/bounceT.png></a> </td>
    <td>This function displays a specified number of 
    markers with random shapes and colors in the form of a 5 pedal rose which 
    then start randomly walking around bouncing off the walls. Click on the 
    &quot;Walk&quot;/&quot;Stop&quot; button to start and stop the motion. The 
    slider controls the walking speed. The argument determines the number of 
    markers, i.e. bounce(88) will display 88 markers. If bounce is called 
    without an argument, the default value will be used (128 markers).
    <ul>
      <li>Shows that plt can create many line objects (each marker is actually a 
          line object) by using matrices for the x,y parameters.
      <li>Shows that plt can set line properties using cell arrays.
      <li>Shows how to disable TraceIDs to avoid the 99 trace limit.
    </ul>
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>circles12.m</h3>
    <a href=../demoImages/circles12a.png> <img src=../demoImages/circles12aT.png></a>
    <a href=../demoImages/circles12b.png> <img src=../demoImages/circles12bT.png vspace="5"></a>
    <td width="99%" valign="top">This is a two part script. The first part 
    creates 3 figures each showing a different solution to the following problem ...
    <b><i><font color="#00cc00"><br>
    <font size="4">Draw 12 circles in a plane so 
    that every circle is tangent to exactly 5 others.</font></font></i></b><p>
    The second part of the script draws the solution to the following problem 
    ...<br>
    <b><i><font color="#00cc00"><font size="4">Divide a circle into n congruent 
    parts so that at least one part does not touch the center.</font><br>
    (Hint: as far as I know, the only solution uses n = 12)<br>
    </i></b></font>An edit pseudo object is also added below the plot which lets you 
    rotate the image and control the rotation speed.</p>
    <ul>
      <li>Shows the utility of using complex numbers to hold the x and y 
    positions of the plotted points.</li>
      <li>Note that even though the calls to plt for solutions 2&amp;3 specify same 
      screen location ('Position' parameter) plt doesn't actually plot them on 
      top of each other. Instead a small offset is added in this situation, a 
      feature that makes it easier to create many plt windows so that any of 
      them can be easily selected with the mouse.</li>
      <li>Demonstrates two ways of creating the Trace IDs (reshape and repmat).</li>
      <li>Demonstrates how to make circles look true by using a zero in the  <span class="mcode">
      'Position' </span>argument (width or height).</li>
      <li>Shows how to hide cursor objects and the menu box (second part of 
      script)</li>
      <li>Uses  <span class="mcode">
      'options','Ticks'</span>
      to select axis tick marks instead of full grid lines.</li>
      </ul>
      </td>
  </tr>
 
  <tr>
    <td width="6%" valign="top">
    <h3>curves.m</h3>
    <a href=../demoImages/curves.png> <img src=../demoImages/curvesT.png></a>
    </td>
    <td width="99%" valign="top">This function shows an example where many GUI controls need to 
    fit into a relatively small 
    space.<ul>
      <li>The ten controls above the graph (nine edit text objects and one 
    popup text object) all are used to control how the parametric curves in the 
    graph are displayed.</li>
      <li>If we used the traditional Matlab/Windows GUI objects, we would 
    have had to make the graph much smaller to make room for all these controls.</li>
      <li>In addition, the <span class="mcode">plt('edit')</span> pseudo objects provide a much easier way to modify the 
    numeric values, nearly matching the convenience of a slider object. The <span class="mcode">plt('edit')</span> 
    and <span class="mcode">plt('pop')</span> commands are described&nbsp;<a href="Auxiliary%20plt%20functions.htm">here</a>.</li>
    </ul>
    <p>After 
    starting curves.m, right click on the curve name at the bottom of the figure 
    to cycle through the 36 different cool looking curve displays. Left click on 
    the curve name as well to select from the complete list of curves.
    If you start it by typing "<span class="mcode">curves cycle</span>" then
    after starting it will cycle once through all 36 curves (at a default rate of
    one second per curve). If you want the cycle to proceed at a different rate, you
	may select the desired rate with the delay popup just below the Cycle button.
    </p>
    <ul>
      <li>The equations in white just below the graph and above the curve name, 
      serve as more than just the x-axis label. This specific string is 
      evaluated by Matlab to compute the points plotted on the graph.</li>
      <li>The vector t, and the constants a, b, and c that appear in these 
      equations are defined by the controls above the graph. Experiment by both 
      right and left clicking on these controls.</li>
      <li>For the cases when more than one trace is plotted, the first control 
      on the left (labeled &quot;trace&quot;) indicates which trace is effected by the 
      other nine controls above the graph.</li>
      <li>Note that when you left click on a control, it will increase or 
      decrease depending on whether you click on the left or right side of the 
      text string.</li>
      <li>Separate values for a, b, and c are saved for each trace of a 
      multi-trace plot. This explains the variety of curves that can appear for 
      a single set of equations (shown below the graph).</li>
    </ul>
    </td>
  </tr>
  
  <tr>
    <td width="6%" valign="top">
    <h3>dice.m</h3>
    <a href=../demoImages/dice.png> <img src=../demoImages/diceT.png></a>
    </td>
    <td width="99%" valign="top">This function displays a simulation of Sam 
    Loyd's carnival dice game. - You bet 1 dollar to play (rolling 3 dice). If 
    one six appears you get 2 dollars, if two sixes appear, you get 3 dollars, 
    if three sixes appear, you get 4 dollars, and otherwise, you get nothing.<ul>
      <li>Three traces are created: accumulated winnings, earnings per bet, and 
      expected earnings per bet.</li>
      <li>The first two traces are displayed as they are computed, i.e. every 
      time the dice are rolled, a new value is appended to the trace and the 
      plot is updated so you can watch the function grow in real time.</li>
      <li>A second axis is added near the top of the figure to show the dice. 
      For each die, a line with dots as markers is added for each of the six 
      faces, with only one of these lines being visible at a time. A square 
      patch is also added for each die for the visual effect.</li>
    </ul>
    </td>
  </tr>
 
  <tr>
    <td width="6%" valign="top">
    <h3>editz.m</h3>
    <a href=../demoImages/editz1.png> <img src=../demoImages/editz1T.png></a>
    <a href=../demoImages/editz2.png> <img src=../demoImages/editz2T.png vspace="5"></a>
    </td>
    <td width="99%" valign="top"> Two plots are created, one showing the 
    poles and zeros of a z-plane transfer function and the other showing the 
    magnitude and phase of it's frequency response. The frequency response plot 
    automatically updates even while you are dragging a root to a new location. 
    At first the updating in real time (i.e. while you are dragging) may not 
    seem so important, but when you use the program its importance becomes 
    clear. This is accomplished by using the <span class="mcode">MotionEdit</span> 
    parameter (see line 125). Besides demonstrating the usefulness of plt's data
    editing capability, my other purpose in writing this
    application was to help engineers develop a feel for how the
    magnitude and phase response reacts to a change in the positions of the transfer
    function poles and zeros. This intuition is much easier to develop if one
    can watch the transfer function change in real time as one drags the roots
    around the <nobr>z-plane.</nobr> <i>(You've got to try it to see what I mean.)</i> Typical
    transfer function display routines rarely provide this capability.
    <ul>
      <li>When the program first starts, text appears in the pole/zero 
      plot that tells you how you can use the mouse to move the roots of the 
      transfer function. However it is easy to miss these important instructions 
      since they disappear as soon as you click on anything in that figure 
      widow. (This was necessary to manage clutter). However you can re-enable 
      the help text at any time by clicking on the yellow &quot;editz help&quot; tag which 
      is centered near the left edge of the figure window.</li>
      <li>In the frequency plot, the x-cursor edit boxes show the cursor 
      location as a fraction of the sample rate. The <span class="mcode">Xstring</span> 
      parameter is used to show this as an angular measure (in degrees) just 
      to the right of the x-cursor readout. Since the DualCur parameter is used, there
      are two y-cursor edit boxes. The first one (green) shows the magnitude response
      in dB and the second one (purple) shows the phase response in degrees. The
      <span class="mcode">Ystring</span> parameter is used to show the magnitude
      response in linear form (in percent). Note that after the plot command, the
      Ystring is moved to the left of the plot because by default the Ystring appears
      in the same place as the dual cursor. The alternate location allows room for a
      multi-line Ystring which is generated compliments of <span class="mcode">prin</span>'s
      cell array output feature. The <span class="mcode">AxisLink</span> 
        parameter is used so that by default the mag/phase axes are controlled separately.</li>
        <li>In the pole/zero plot, the x and y-cursor edit boxes show the 
        pole/zero locations in Cartesian form. The Xstring parameter shows the 
        polar form just to the right of the x-cursor readout.</li>
        <li>Normally plt's data editing is initiated when you right click on 
        either the x or the y cursor readouts. However when data editing is 
        being used extensively (as in this program) it is useful to provide an 
        easier way to enter editing mode. In this program, this is done with the 
        patch object that appears just below the traceID box. (The patch object 
        is created on line 136 of this file). The 'Dedit' application data 
        variable is used (see lines 128 to 130) to change the default editing 
        mode from the usual default (change only the y coordinate) to the 
        alternative (allow changing both the x and y coordinates. Also the 
        application data variable 'EditCur' (see line 131) is used to change the 
        default size of the cursors used for editing.</li>
        <li>Notice that while dragging a pole or a zero to a new location, the 
        pole or zero remains inside the diamond shape edit cursor ... except 
        that is when you get close to the x axis. At that point the root jumps 
        out of the edit cursor and sticks to the x axis (for as long as the edit 
        cursor remains inside the green band). Without this snap to behavior it 
        would be nearly impossible to create a real root. Similarly, when you 
        drag a zero (but not a pole) &quot;close&quot; enough to the unit circle, the zero 
        will &quot;snap to&quot; the circle. Without this feature it would be difficult to 
        create a transfer function with a symmetric numerator polynomial.</li>
        <li>How &quot;close&quot; is close enough for these snap to operations? Well this 
        is determined by the Tolerance slider which is in the lower left corner 
        of the pole/zero plot. Notice that as you move this slider, the width of 
        the green band surrounding the x-axis and the unit circle gets bigger. 
        If disable the snap to feature, simply move the tolerance slider to 0.</li>
        <li>Shows how to close both figures when either plot is closed by using the
        <span class="mcode">'Link'</span> parameter.</li>
    </ul>
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>gauss.m</h3>
    <a href=../demoImages/gauss.png> <img src=../demoImages/gaussT.png></a>
    </td>
    <td width="99%" valign="top">This script plots the results of combining uniform random variables.
    <ul>
      <li>Shows the advantage of setting the line data after the 
      <span class="mcode">plt(..)</span> call.</li>
      <li>Note the use of the <span class="mcode">'FigName'</span> and 
      <span class="mcode">'TraceID'</span> arguments.</li>
      <li>Note the appearance of the Greek letter in the x-axis label.</li>
      <li>Shows how to use the 
      <span class="mcode">'COLORc'</span> argument to select Matlab's default 
      plotting colors (typically set to use a white background for the plotting 
      area)</li>
      <li>Shows how to use the 
      <span class="mcode">'DIStrace'</span> argument to disable some traces on 
      startup.</li>
      <li>Shows how to use the 
      <span class="mcode">'MotionZoom'</span> argument to create a new plot 
      showing only the zoom window. Admittedly this is more contrived than 
      useful in this particular script, but at least this example will clarify 
      the function of the MotionZoom parameter.</li>
      <li>The zoom window plot also demonstrates an easy way to copy the trace data
      from one plot to another (in this case from the main plot to the zoom plot).</li>
    </ul>
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>gui1.m</h3>
    <a href=../demoImages/gui1.png> <img src=../demoImages/gui1T.png></a>
    </td>
    <td width="99%" valign="top">
        Usually plt is used to build gui applications which include plotting,
        however this example shows that you can use it to create a gui without
        any plots. If you are new to Matlab GUIs, this example is a good one
        to start with since it is simple enough to get the basic ideas. The
        gui objects used here are entirely uicontrols, although the idea of
        a pseudo object is also introduced by using the PseudoSlider object.
        (A PseudoSlider is an object defined by plt consisting of a collection
        of 5 uicontrols designed to work together to control a single parameter.)
        <br><br>
        This GUI doesn't actually perform any useful function other than to
        demonstrate how to create and the various controls and move them around
        until the GUI appears as desired. The slider callback generates new
        random numbers for the listbox, textbox, and uitable. The remaining
        callbacks are just stubs that notify you that you clicked on the object.
        <br><br>
        You can most easily absorb the point of this example (and the following
        example called gui2.m) by watching my video using this link:
        <br><br>
        <a href="http://www.mennen.org/plt/pltfiles/demoImages/MatlabGUIbuilding.mp4">MatlabGUIbuilding.mp4</a>.
        <br><br>
        Or if you prefer to read the video script, it's available here:
        <nobr><a href="../Programming%20with%20plt/GUI%20building%20with%20plt.htm">GUI building with plt</a></nobr>.
        <br><br>
        If you are running a version of Matlab older than 7.0 then you should run
        the alternate version of this program called gui1v6.m. gui1.m uses a uitable
        which aren't supported in Matlab 6, so gui1v6 replaces the uitable with a
        radio button. This substitution happens automaically if you are starting
        gui1 from demoplt.
    </td>
  </tr>
 
  <tr>
    <td width="6%" valign="top">
    <h3>gui2.m</h3>
    <a href=../demoImages/gui2.png> <img src=../demoImages/gui2T.png></a>
    </td>
    <td width="99%" valign="top">
        Unlike the previous gui building example (gui1.m) this one includes a
        plot and actually performs a useful function (displaying the frequency
        response of the most common traditional analog filters). GUI controls
        are provided to adjust the most important filter parameters (Filter
        order, Cutoff frequency, & Passband/Stopband ripple). The capabilities
        of this program where intentionally kept modest to make it easy to learn
        how to use plt to create a plot based graphical interface.
        <br><br>
        Five calls to plt are made to create seven pseudo objects. The first plt
        call creates the first three pseudo objects:
    <ol> <li>a plot
             <li>a cursor
             <li>a grid
             <li>an edit object (filter order)
             <li>a slider (cutoff freq)
             <li>a slider (passband ripple)
             <li>a slider (stopband ripple)
    </ol>
        Although Matlab already has objects with these names, these pseudo objects
        are different. They provide more utility and have more options.
        In addition to these pseudo objects, three uicontrols are created. The first
        is simply used as a label, the 2nd selects the number of decades to display
        and the 3rd selects how many points to use for plotting the frequency response.
        <br><br>
        You can most easily absorb the point of this example (and the previous
        example called gui1.m) by watching my video using this link:
        <br><br>
        <a href="http://www.mennen.org/plt/pltfiles/demoImages/MatlabGUIbuilding.mp4">MatlabGUIbuilding.mp4</a>.
        <br><br>
        Or if you prefer to read the video script, it's available here:
        <nobr><a href="../Programming%20with%20plt/GUI%20building%20with%20plt.htm">GUI building with plt</a></nobr>.
        <br><br>
        Although this application uses 10 traces (5 for magnitude on the left axis
        and 5 for phase on the right axis) my first idea was to use just 5 traces
        where each trace included both the magnitude and phase information. Just one axis
        was used, which required rescaling the phase information so that it would appear
        directly above the magnitude plot. The tick marks were modified so they read in
        degrees in the phase portion of the plot which was highlighted with a gray patch
        to visually separate it from the magnitude plot. Despite the required rescaling,
        the 5 trace method was still the simplest way to go. However once I added the feature
        for displaying both magnitude and phase cursors at the same time, it became clear
        that the more straightforward 10 trace method would be shorter because plt already
        includes the "DualCur" feature for cursoring two traces at once. However displaying
        multiple data sets per trace still may be a useful trick on occasion, so I have
        included the older 5 trace version of this application in the demo folder
        (gui2ALT.m). The alternate version is not run by demoplt.m.
        <br><br>
        If you are running a version of Matlab older than 7.0 then you should run the alternate
        version of this program called gui2v6.m. gui2 uses a uipanel which aren't supported in
        Matlab 6, so gui2v6 replaces the uipanel with a uicontrol frame which serves pretty much
        the same function. You should also use the alternate version with R2014b. Although R2014b
        supports the uipanel, there is a bug in R2014b relating to the stacking order of a uipanel.
        If you are starting gui2 from demoplt, the correct version of gui2 will automatically be run.
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>movbar.m</h3>
    <a href=../demoImages/movbar.png> <img src=../demoImages/movbarT.png></a>
    </td>
    <td width="99%" valign="top">This function plots a series of 40 random bars 
    and displays a horizontal threshold line which you can move by sliding the 
    mouse along the vertical green line. As you move the threshold line, a 
    string below the plot reports the number of bars that exceed the threshold. 
    (This demonstrates the use of the plt <span class="mcode">xstring</span> 
    parameter.). These two buttons are added to the plt figure:<ul>
      <li><i><b>Rand</b></i>: Sets the bar heights to a new random data set.</li>
      <li><i><b>Walk</b></i>: Clicking this once starts a random walk process of 
      the bar heights. Clicking a second time halts this process. The Walk 
      button user data holds the walk/halt status (1/0 respectively) 
      demonstrating a simple way to start and stop a moving plot.</li>
    </ul>
    <p>Note that you can move the threshold or press the Rand button while it is 
    walking. Also, if you click on one of the vertical purple bars, the 
    horizontal threshold bar will then follow the upper end of that vertical 
    bar.
    </td>
  </tr>
    
  <tr>
    <td width="6%" valign="top">
    <h3>plt50.m</h3>
    <a href=../demoImages/plt50.png> <img src=../demoImages/plt50T.png></a><br><br>
    </td>
    <td width="99%" valign="top">This script is similar to plt5.m except the 
    number of functions plotted has been increased to 50 to demonstrate the use 
    of the TIDcolumn parameter.<ul>
      <li>Normally the legend is rendered in a single column; but with this many 
      traces, the trace IDs fit much more comfortably in two columns. The <span class="mcode">
      'TIDcolumn',25 </span>included in the plt argument list actually specifies 
      the number of items to put in the second column, which in this example 
      means that both columns will contain 25 items.
      <li>With so many traces, the utility of using the legend to selectively 
      enable or disable individual traces becomes even more compelling. Although 
      the traces and the legend are color coded, it's difficult to distinguish 
      every trace based on color, so clicking on a legend item is often 
      necessary to uniquely identify a trace. This also is essential when you 
      need to reduce the clutter that often results from plotting so many 
      traces.
      <li>The <span class="mcode">'Position'</span> parameter is used to 
      increase the figure area about 30% from the default of 700x525 pixels to 
      830x550 to make the plot less crowded.
      <li>The <span class="mcode">'HelpFileR'</span> parameter is used to specify
      which help file will appear when you right click on the Help tag in the menu box.
      Normally the file specified will contain help for the currently running script.
      In this case prin.pdf is just used as an example and in fact has nothing to
      do with plt50.
      <li>The use of the <span class="mcode">'closeReq'</span> parameter is shown,
      although in this case the function specified merely displays a message.
      Look at the gui2.m and wfall.m demos to see examples of a somewhat more
      sophisticated close request functions.
      <li> In situations like this with so many traces on the plot it can be
      difficult to find the cursor. The last line of this script solves this problem
      by both increasing the cursor size from 8 to 20 and by changing the cursor
      shape from a plus sign to an asterisk.
    </ul>
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>pltn.m</h3>
    <a href=../demoImages/pltn.png> <img src=../demoImages/pltnT.png></a>
    </td>
    <td width="99%" valign="top">Similar to <span class="mcode">
    plt5 </span>and<span class="mcode">
    plt50</span>, except that this is a function instead of a script. This function takes an 
    argument which specifies how many traces to plot. For instance
    <span class="mcode">pltn(1)</span> will plot a single trace, and
    <span class="mcode">pltn(99)</span> will plot 99 traces. If you specify any more
    traces than this, the trace IDs are not displayed (since there will not be room for them).
    <span class="mcode">pltn</span> with no arguments does the same thing as "pltn(99)".
    You can change the number of traces plotted even after pltn is already running by entering
    a new number in the "<b># of lines</b>" edit box (bottom center). Try entering "1000" into this
    edit box just to see that plt can actually handle such a large number of traces!
      <ul>   
      <li>The <span class="mcode">TIDcolumn</span> parameter is used to divide the trace 
      IDs into up to three columns if necessary. (Showing 99 trace IDs in one column wouldn't 
      be practical.)</li>
      <li><span class="mcode">TraceIDs</span> are disabled when more than 99 traces 
      are specified. (Otherwise plt would complain.)</li>
      <li>Uses the
    <span class="mcode">'Ystring'</span> parameter to show a continuous readout 
      of the cursor index.</li>
      <li>Uses the
    <span class="mcode">'Xstring'</span> parameter to show a continuous readout 
      of the date and time corresponding to the cursor X position. Note the edit box 
      form is selected by placing a question mark character at the beginning of the 
      string.</li>
      <li>A callback is written for the Xstring edit box that moves the cursor 
      to the index with a corresponding time as close as possible to the entered 
      value. For example, try this:
      <ol><li>Click on the top trace (which makes it easy to see the cursor).</li>
          <li>Enter dates into the edit box - e.g. &quot;<b>30 dec 2006</b>&quot;,
      or &quot;<b>3-jan-07 9:59</b>&quot;, etc.</li>
         <li>Verify that the cursor moves to the corresponding point.</li>
      </ol>
       </ul>
      </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>pltquiv.m</h3>
    <a href=../demoImages/pltquiv.png> <img src=../demoImages/pltquivT.png></a>
    </td>
    <td width="99%" valign="top">This script file demonstrates several plt 
    tricks and features:<ul>
      <li>The <span class="mcode">Pquiv.m</span> function appears twice in the plt argument list to plot two 
      vector fields both with the base location specified by f and lengths 
      specified by v1 and v2 respectively. The first of these Pquiv calls is somewhat similar to the&nbsp; Matlab 
      command <span class="mcode">
      quiver(real(f),imag(f),real(v1),imag(v1));</span></li>
      <li>Using tex commands (e.g. \uparrow) inside Trace ID names</li>
      <li>Reassigning menu box items. In this example, the <span class="mcode">
      LinX</span> tag is replaced by a <span class="mcode">
      Filter</span> tag. Its buttondown function (which is executed when you 
      click on 'Filter') searches for the 4th trace (using findobj) and swaps 
      the contents of its user data and y-axis data. </li>
      <li>Adding text items to the figure. Note that the text position is 
      specified using x and y axes coordinates.</li>
      <li>Using  NaNs (not a number) to blank out portions of a trace. In this 
      case, the NaNs were inserted into the x coordinate data, although using 
      the y or z coordinates for this purpose works equally as well.</li>
      <li>Using the TraceID callback function (<span class="mcode">TIDcback</span>) 
      to perform an action when you click on a trace ID. For example, when you 
      click on the last trace ID (humps+rand) this will appear in the command 
      window: &quot;A trace named humps+rand and color [1&nbsp;0&nbsp;0] was toggled&quot;. 
      (This TraceID callback was contrived to use all the substitutions, and is 
      not particularly useful.)</li>
    </ul>
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>pltsq.m</h3>
    <a href=../demoImages/pltsq.png> <img src=../demoImages/pltsqT.png></a>
    <a href=../demoImages/pltsqALT.png> <img src=../demoImages/pltsqALTt.png vspace="5"></a>
    </td>
    <td width="99%" valign="top">
    <span class="mcode">pltsq.m</span> approximates a square wave by adding up the first
    five odd harmonics of a sine wave. The plot displays successive sums of these
    harmonics which approximates a square wave more closely as more harmonics
    are added together. The key point however (and the reason this demo was
    created) is that the amplitudes of these sine waves and sums are continually
    varied (periodically between plus and minus one) to produce a "real-time"
    moving display. plt is well suited to creating real-time displays, but there
    are a few concepts to learn and this demo is an excellent starting point.
    <ul>
      <li>Type<span class="mcode"> pltsq </span> or <span class="mcode"> pltsq(0) </span>
       to start pltsq in its stopped state. (i.e. the display is not updating)
      <li>Type<span class="mcode"> pltsq(1) </span>or<span class="mcode"> pltsq('run') </span>
          to start pltsq with the display dynamically updating.
      <li>Demonstrates how you can add GUI controls to the plt window - typically
          something you will need to do when creating plt based applications.
      <li>Five pseudo popup controls are added to the figure to the left of the plot
          including one "super-button" to start and stop the plotting.
      <li>A text object appears below the plot which displays "updates/second" - a good
          measure of computational & graphics performance. The color of this text object
          is toggled every time it is refreshed so that you can tell the speed is being
          recomputed even if the result is the same.
      <li>The <span class="mcode">'xy'</span> argument is used to make room for pseudo
          popups as well as for the wider than usual TraceIDs.
      <li>In the code, the position coordinates for the five popups are grouped in a
          single array to make it easy to update these coordinates using the
          <span class="mcode">plt&nbsp;move'</span> function. For details on how this is done,
          refer to the gui1 & gui2 examples.
      <li>Normalized units are used here for the uicontrols. The "plt&nbsp;move" function
	      also handles pixel units which is useful when you don't the objects to change
		  size when the figure window is resized.
      <li>The cursor callback parameter (<span class="mcode">'moveCB'</span>) and the
          <span class="mcode">plt('rename')</span> call are used to provide simultaneous
          cursor readouts for all 5 traces in the TraceID box. (Although you can cursor
          the traces while the displays are updating, to make it easier to see what is going
          on, click the stop button first, then click anywhere in the plot area to see all
          five cursor values update.)
      <li>The <span class="mcode">'Options'</span> argument is used to turn off grid lines
          and to remove the x and y-axis Log selectors from the menu box.
      <li>You can use the Erasemode popup to explore the effect of the
          erasemode property on drawing speed. (The erasemode property is no longer supported in
          Matlab version R2014b or later, so pltsq.m checks the Matlab version anddisables the
          popup appropriately.) You can also effect the drawing speed by varying the number of
          points per plot from a low of 25 points to a high of 51200 points (32 cycles times
          1600 points per cycle).
    </ul>
    The demo folder also includes an alternate (older) version of this program
    (called <span class="mcode">pltsqALT.m</span> shown in the second of the two figures
    to the left) that performs exactly the same function
    except that uicontrols are used in place of the popup pseudo objects. This allows you
    to compare and contrast the relative merits of the two types of objects. Also note that
    the alternate version passes the S structure to the callbacks using a different method
    (through the parameter list). Both methods have merit. The control structure of pltsqALT
    is a bit unusual in that if you change parameters with the uicontrols while the display
    is left running, a new while loop is started, leaving all the previous while loops still
    running. This doesn't cause any problems however since only the newest while loop has a
    chance to do anything and all the older while loops are properly terminated when you hit
    the stop button or exit the program. The newer version (pltsq.m)
    avoids this infinite nesting by separating the start/stop callback from the other control
    callbacks. This slightly complicates the communication of variables between the parameter
    and display loops and slows the update rate down by about 6%, but still it may be the
    morally correct approach. Despite this additional complexity, the newer version (with 51
    lines of code) is still shorter than the older version (58 lines of code) because of the
    use of the more powerful pseudo objects. (The alternate version is not run by demoplt.m).
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>pltvar.m</h3>
    <a href=../images/PltSel2.png> <img src=../demoImages/pltvarT.png></a><br><br>
    </td>
    <td width="99%" valign="top">To demonstrate the workspace plotter, this 
    script creates several vectors in the workspace (including a structure 
    containing two vector fields) and then starts the workspace 
    plotter by calling plt with no arguments. Workspace plotting is described
    <a href="../Quick%20start/Workspace%20plotting.htm">here</a>
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>pltvbar.m</h3>
    <a href=../demoImages/pltvbar.png> <img src=../demoImages/pltvbarT.png></a>
    </td>
    <td width="99%" valign="top">This script demonstrates the use of
      <span class="mcode">Pvbar.m</span> and <span class="mcode">Pebar.m</span>
      to plot vertical bars and error bars respectively. Some things to 
      note about pltvbar are:
      <ul>
      <li>The first Pvbar in the argument list plots two functions on a single 
      trace (green) with the 1st function (phase1) defining the position of the 
      bottom of the vertical bars and the 2nd function (phase2) defining the 
      position of the tops of the bars.</li>
      <li>The second Pvbar in the list plots 3 functions (called serp, bell1, and 
      bell2). The 3 columns of the first Pvbar argument define the x coordinates 
      for those three functions. The next argument (0) indicates that the bottom 
      of all the vertical bars is at y=0. The last Pvbar argument gives the y 
      coordinate for each of the 3 functions (one function per column).</li>
      <li>The next trace definition (the data argument pair after the
      <span class="mcode">'linewidth'</span>) plots two traces corresponding to 
      the two columns of <span class="mcode">poly23</span>. The 1st column is a
      2nd order polynomial and the 2nd column is 3rd order.</li>
      <li>The next trace definition uses Pebar function to create two error bar 
      traces, the first trace defined by the first column of each of the 3 
      arguments and the second trace defined by the second column.</li>
      <li>The
    <span class="mcode">'screensize'</span> property is used to make the plot 
      fill a fixed fraction of the space available.</li>
      <li>The
    <span class="mcode">'linewidth'</span> argument appears in the middle of the 
      plt call to change the width of only the traces defined earlier in the 
      argument list.</li>
      <li>The
    <span class="mcode">'TraceID'</span> argument is used to assign names for 
      each trace that are appropriate for the data being displayed.</li>
      <li>The
    <span class="mcode">'xy'</span> argument is used to widen the TraceID 
      box to make room for the longer than usual trace ID names</li>
      <li>The <span class="mcode">'Options'</span> argument is used to enable the menu bar 
      and to add the &quot;Print&quot; tag to the menu box.</li>
      <li>The
    <span class="mcode">'+FontSize'</span>,
    <span class="mcode">'+FontWeight'</span>, 
    <span class="mcode">'+FontAngle'</span>, 
    <span class="mcode">'+Xtick'</span>, 
    <span class="mcode">'+Ytick'</span>, 
      arguments are used to modify the main axis properties of the same name 
      (without the plus).</li>
    <li>The Grid pseudo object is used to create a 8x3 table of character data.</li>
    </ul>
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>pub.m</h3>
    <a href=../demoImages/puba.png> <img src=../demoImages/pubaT.png></a>
    <a href=../demoImages/pubb.png> <img src=../demoImages/pubbT.png vspace="5"></a>
    <a href=../demoImages/pubc.png> <img src=../demoImages/pubcT.png></a>
    </td>
    <td width="99%" valign="top">
      All the other plt examples in the demo folder use plotting formats appropriate
      for data exploration (the main design goal of plt). However plt can also use
      formats appropriate for creating plots for publication. This script demonstrates
      this by creating three different figures windows. Note that all three windows are
      created by calling <span class="mcode">pltpub()</span> which simply calls
      <span class="mcode">plt()</span> with several parameters optimized for creating
      publishable plots.
      <ol>
      <li>The first window (plot 1 - appearing near the top of the screen) is a bar
      chart that demonstrates how to embed the plot data inside the script as comments.
	  It also demonstrates the use of the <span class="mcode">prin</span> function to
	  display a table of random numbers in a text box. The vertical position of the plot
	  depends on the screen size.</li>
      <li>The second window (plot 2 - lower left portion of the screen) demonstrates
      how to distribute 15 functions among 5 subplots by using the
      <span class="mcode">'SubTrace'</span> parameter
      and how to set the trace colors and line styles.</li>
      <li>The third window (plot 3 - lower right) contains two traces with error bars,
      shows how to use the TraceID box as a legend. The special character
      <span class="mcode">']'</span> is used in the first TraceID to disable the shading
      of the trace name that is normally used to indicate the trace is on the right hand axis.
      Also the <span class="mcode">'+XtickLabel'</span> parameter is used in the plt call
      to remove the tick labels on the x axis. Then an array of text objects are used to create
      specially formatted tick labels.
     <ul>
      <li>Shows the use of the &quot;<span class="mcode">+ - &lt; &gt; .</span>&quot; prefixes 
      to modify properties of:<br>
        &nbsp; &nbsp; &nbsp; <span class="mcode"><b>+</b> </span>&nbsp; &nbsp; the left axis<br>
        &nbsp; &nbsp; &nbsp; <span class="mcode"><b>-</b> </span>&nbsp; &nbsp; &nbsp;the right axis<br>
        &nbsp; &nbsp; &nbsp; <span class="mcode"><b>&lt;</b> </span>&nbsp; &nbsp; the left y-label<br>
        &nbsp; &nbsp; &nbsp; <span class="mcode"><b>&gt;</b> </span>&nbsp; &nbsp; the right y-label<br>
        &nbsp; &nbsp; &nbsp; <span class="mcode"><b>.</b> </span>&nbsp; &nbsp; &nbsp; the x-label</li>
      <li>Uses the <span class="mcode">'COLORdef'</span> parameter to select a 
      white plot background
      <li>Uses the <span class="mcode">'NoCursor'</span> option to remove the 
      cursor objects
       <li>Demonstrates various ways of modifying the grid lines
    </ul>
    </li></ol>
    </td>
  </tr>
  
  <tr>
    <td width="6%" valign="top">
    <h3>pub2.m</h3>
    <a href=../demoImages/pub2a.png> <img src=../demoImages/pub2aT.png></a>
    <a href=../demoImages/pub2b.png> <img src=../demoImages/pub2bT.png vspace="5"></a>
    </td>
    <td width="99%" valign="top">
      In this example, a plt figure is created in its usual data exploration mode
      showing 6 traces of randomly generated data. Each trace contains over 50
      thousand data points, although the display is zoomed to show only a small
      portion of the data. The idea is to use the cursor controls to pan and/or
      zoom the display to some area of interest and then press the "pub" button to
      generate a figure optimized for publication.<br><br>

      What makes this more interesting is that when you pan to a new section of the
      data and again press the "pub" button, the publication figure is redrawn using
      subplots to show both selected portions. In a like manner, successive presses
      of the pub button further subdivide the plotting area with each new data range
      appearing above the previous ones.<br><br>

      The x axis of the data exploration window is plotted in units of days past a
      time reference (1-Jan-2013 in this example), but custom date ticks are used
      on the x axis of the publication plot. To reduce clutter, only the day and month
      are shown for all vertical grid lines except the last one (which includes day,
      month, & year).<br><br>

      The 'xView' option is used to enable the xVview slider which is particalarly
      useful in situations like this where you are viewing only a small portion
      of a long data record. (The xView slider appears above the primary figure.)<br><br>
      
      The TraceID box is typically placed to the left of the plot, although for
      the publication figure in this demo the TraceID box is placed right on top
      of the plot (more like a legend). This means that sometimes the TraceID box
      will obscure some of the data, but note that you can easily use the mouse
      to drag the legend around to a spot that does not interfere with the plot.<br><br>
      
      This example may seem somewhat contrived - and indeed it was conceived mostly to
      demonstrate as many unusual plt parameters and programming techniques as possible.
     </td>
  </tr>
  
  <tr>
    <td width="6%" valign="top">
    <h3>subplt.m</h3>
    <a href=../demoImages/subplt.png> <img src=../demoImages/subpltT.png></a>
    </td>
    <td width="99%" valign="top">The <span class="mcode">'SubPlot'</span> 
    argument is used to create 3 axes. plt puts a single trace on each axes 
    except for the main (lower) axis which gets all the remaining traces. In 
    this case, since there are 5 traces defined, the main axis has 3 traces. 
    Note that the traces are assigned to the axes from the bottom up so that the 
    last trace (serp) appears on the upper most axis.<ul>
      <li>The <span class="mcode">'LabelY'</span> argument defines the y-axis 
      labels for all three axes, again from the bottom up. You can also define 
      the y-axis label for the right hand main axis, by tacking it onto the end 
      of the LabelY array (as done here).</li>
      <li>The <span class="mcode">'Right',2 </span>argument is used to specify 
      that the 2nd trace of the main axis should be put on the right hand axis. 
      If this argument was omitted, plt would still have known that a right hand 
      axis was desired (because of the extra y-label in the LabelY array) 
      however it would have put trace 3 on the right hand axis. (By default, the 
      last trace goes on the right axis).</li>
      <li>The <span class="mcode">LineWidth</span> and <span class="mcode">
      LineStyle</span> arguments define line characteristics for all 5 traces.</li>
      <li>The <span class="mcode">TraceMK</span> parameter enables the trace 
      selection 
      box to show the line characteristics and the <span class="mcode">AxisPos</span> 
      parameter widens the trace selection box to make room for this.</li>
      <li>Note that the lower (main) axis has all the usual plt cursoring 
      features. The other 2 plots support a subset of the cursoring features and 
      have individual color coded y-value cursor readouts shown along the bottom 
      portion of the figure.</li>
      <li>Only a single x-axis edit box is needed since plt keeps the cursors of 
      all three axes aligned. Also note that if you zoom or pan any of the 3 
      plots, the other two plots will adjust their x-axis limits to agree.</li>
    </ul>
    </td>
  </tr>
  
  <tr>
    <td width="6%" valign="top">
    <h3>subplt8.m</h3>
    <a href=../demoImages/subplt8.png> <img src=../demoImages/subplt8T.png></a><br><br>
    </td>
    <td width="99%" valign="top">This script shows a slight expansion of the 
    ideas found in subplt.m by increasing the number of axes from 3 to 8. Also 
    the axes are arranged in two columns which allows the use of two different x 
    axes (one for each column).<ul>
      <li>Note that the four axes on the left are synchronized with each other 
      as well as the four on the right, although the left and right halves are 
      independent of each other and have different x axis limits and units.</li>
      <li>The main plot (lower left) contains 3 traces because 10 traces have 
      been defined and 7 of them are assigned to the other 7 subplots. The main 
      plot doesn't have a right hand axis in this example, although it would if 
      a <span class="mcode">'Right'</span> argument was included or if an extra 
      y-label were included in the <span class="mcode">'LabelY'</span> array.</li>
    </ul>
    </td>
  </tr>
   
  <tr>
    <td width="6%" valign="top">
    <h3>tasplt.m</h3>
    <a href=../demoImages/tasplt1.png> <img src=../demoImages/tasplt1T.png></a>
    <a href=../demoImages/tasplt2.png> <img src=../demoImages/tasplt2T.png vspace="5"></a><br><br>
    </td>
    <td width="99%" valign="top">This script file creates two plots each 
    consisting of 9 traces. These plt tricks and features are demonstrated:<ul>
      <li>Note that these figures plot multiple valued functions (i.e. 
      relations).</li>
      <li>The first plot (efficiency and range chart) creates a trace for each 
      column of gph and mpg (9 columns for 9 altitudes)</li>
      <li>Demonstrates adding an additional axis to show alternate units on the 
      right hand and/or top axis</li>
      <li>Demonstrates adding text objects to annotate the graph</li>
      <li>Demonstrates how the cursors in two plots can be linked. Moving one, 
      moves the other. Also in this example switching the active trace in one 
      plot does the same in the other as well.</li>
      <li>Uses the <span class="mcode">'Xstring'</span> and <span class="mcode">'Ystring'</span> 
      parameters to display alternate units.</li>
      <li>Shows how to close both figures when either plot is closed by using the
          <span class="mcode">'Link'</span> parameter.</li>
    </ul>
    </td>
  </tr>
  
  <tr>
    <td width="6%" valign="top">
    <h3>trigplt.m</h3>
    <a href=../demoImages/trigplt.png> <img src=../demoImages/trigpltT.png></a><br><br>
    </td>
    <td width="99%" valign="top">This example demonstrates:<ul>
      <li>The use of the slider pseudo object
      <li>showing the line characteristics in the TraceID using the <span class="mcode">TraceMK</span> parameter
      <li>setting the cursor callback with the <span class="mcode">moveCB</span> parameter
      <li>setting axis, TraceID box, and MenuBox positons using the <span class="mcode">xy</span> parameter
      <li>setting trace characteristics with the <span class="mcode">Linewidth</span>,
          <span class="mcode">Styles</span>, and <span class="mcode">Markers</span> parameters
      <li>setting an initial cursor position
      <li>enabling the multiCursor mode
      <li>how to modify the colors and fonts of the Trace IDs.
    </ul>
    Text objects are used to display help information at the top of the plot 
    window. This help text disappears when any parameter is changed but can be 
    re-enabled by clicking on the help button.
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>weight.m</h3>
    <a href=../demoImages/weight.png> <img src=../demoImages/weightT.png></a>
    </td>
    <td width="99%" valign="top">This script shows another example of putting 
    more than one plot in 
    a single figure. The SubPlot argument is used to create three axes. The lower axis contains 
    four traces showing the magnitude of 4 
    different weighting functions used in sound level meters (as defined by IEC 
    651). The upper axis also contains 4 traces showing the same 4 functions 
    except in dB instead of the linear units used for the lower axis. The middle 
    axis shows the inverse of the linear magnitude traces, which isn't 
    particularly interesting except that I wanted to demonstrate the use of 
    three axes.<ul>
      <li>Normally plt only puts one trace on each subplot except for the main 
      (lower) axis. So in this case (with 12 traces) plt puts 10 traces on the 
      lower axis and one on the other two. Since we really want 4, 4, and 4, the <span class="mcode">'SubTrace'</span> 
      parameter is used partition the traces between the axes as desired.</li>
      <li>Note that using the SubTrace parameter pretty much assures that the 
      native plt cursor objects will not behave consistently. For this reason, 
      cursors are often disabled when the SubTrace parameter is used. However in 
      this example we want the cursoring to work, so we use the <span class="mcode">'moveCB'</span> 
      cursor callback (and case 1 of the switch command) to keep the cursors 
      synchronized so they make sense for this particular situation. Because of 
      this extra code you will notice that the cursors in the upper two axes 
      automatically move to the same trace and the same x position used in the 
      current approach</li>
      <li>&nbsp;The traceID callback (<span class="mcode">'TIDcback'</span>) insures 
      that the traceID box controls the traces in the upper two axes as well (switch case 2).</li>
      <li>Note the <span class="mcode">'LineWidth'</span> argument in the plt 
      call. This illustrates how any line property may be included in the 
      calling sequence.</li>
    </ul>
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>wfall.m</h3>
    <a href=../demoImages/wfall.png> <img src=../demoImages/wfallT.png></a>
    </td>
    <td width="99%" valign="top">This function shows one way to create a 
    waterfall plot with hidden line removal
	.<ul>
      <li>Type<span class="mcode"> wfall </span> or <span class="mcode"> wfall(0) </span>
       to start wfall in its stopped state. (i.e. the display is not updating)
      <li>Type<span class="mcode"> wfall(1) </span>or<span class="mcode"> wfall('run') </span>
          to start wfall with the display dynamically updating.
      <li>Note how plt is called with a single trace color and no TraceID box.
      <li>Figure user data and setappdata are used to communicate with the callback.
      <li>Extensive use of the slider pseudo object to control the plotted data.
      <li>The <span class="mcode">'Linesmoothing'</span> option is selected
          (which surprisingly speeds up the display dramatically on many systems)
      <li>A pseudo popup in "super-button" mode is used to start and stop the display.
      <li>The number of display updates per second is calculated every second with
          the results shown in a large font below the plot.
    </ul>
    </td>
  </tr>

  <tr>
    <td width="6%" valign="top">
    <h3>winplt.m</h3>
    <a href=../demoImages/winplt.png> <img src=../demoImages/winpltT.png></a>
    </td>
    <td width="99%" valign="top">This application displays traces showing 
    the time and frequency domain shapes of 31 different FFT windows and provides
    tools for designing new FFT windows.
    <ul>
      <li>Demonstrates how to provide application specific help from a menu box 
          tag (<span class="mcode">HelpW</span>&nbsp; in this example) using the
          web browser to open an html document as well as by opening a specific
          topic inside a  windows compiled help file (.chm format).
      <li>Demonstrates a novel use of the pseudo popup object - editing a vector from
           a gui. <nobr>(See ID30 - adjust kernel)</nobr>
      <li>Shows the power of the prin.m function [creation of the 4 line window parameter block].
      <li>Demonstrates adding an application version string (lower right corner of the figure)
      <li>This is more than a demo, but has signal processing educational value. For a
          complete description of this application and its motivation, click
          <a href=../winplt/winplt.htm>here.</a>
    </ul>
    </td>
  </tr>
  </table>

</body>
</html>