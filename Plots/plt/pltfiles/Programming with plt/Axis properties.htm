<html>
<head>
<title>Axis properties</title>
<style>
<!--
span.mcode
{ color: #ff0000;
  font-family: 'Lucida Console', 'Andale Mono', 'Courier New', monospace;
}
h3 { color: #009988 }
-->
</style>
</head>
<body>

<img src="../images/plt.png" width="300" height="160" align="right"></td>
<br><h1>Axis properties</h1> <br clear="left"><br><br><br><br>

<table border="1" cellpadding="8" cellspacing="0" bordercolor="#b0b0b0" width="100%">
  <tr>
    <td valign="top"> <h3>Xlim</h3> </td>
    <td><span class="mcode">plt(...,'Xlim',[xmin xmax]);</span><br>
    Specifies the x-axis limits. If you are using a 2 column subplot, you 
    can specify the x-limits for both both columns by using a cell array. i.e.
    <nobr><span class="mcode">'Xlim',{[xminL xmaxL]; [xminR xmaxR]};</span></nobr>
    If you want to specify just the right column limits, replace the left 
    column limits with the string <span class="mcode">'default'</span>.</td>
  </tr>
  <tr>
    <td valign="top"> <h3>Ylim</h3> </td>
    <td> <span class="mcode">plt(...,'Ylim',[ymin ymax]);</span><br>
    Specifies the y-axis limits for the left-hand y axis of the main 
    plot. Alternatively you may specify the limits for the main plot left and 
    right hand y-axes using a cell array input as in:
    <span class="mcode">'Ylim',{[ymin&nbsp;ymax]&nbsp;[yminR&nbsp;ymaxR]}</span>. 
    The <span class="mcode">'Right'</span> parameter should also be included in this case, however
    if you don't, plt will default to placing the last trace on the right hand axis. Note that 
    this parameter only specifies limits for the main plot and never for any of the other subplots. 
    If you need to set the y-axis limits for the other subplots, use the set 
    command with the axis handles obtained from <span class="mcode">getappdata(gcf,'axis')</span>.
    </td>
  </tr>
  <tr>
    <td valign="top"> <h3>YlimR</h3> </td>
    <td><span class="mcode">plt(...,'YlimR',[ymin ymax]);<br>
    </span>Although this is most often done with the <span class="mcode">Ylim</span> 
    parameter (above) you may also specify the limits for right-hand y axis 
    using the <span class="mcode">YlimR</span> parameter. The <span class="mcode">'Right'</span> 
    parameter should also be included in this case, however if you don't, plt 
    will default to placing the last trace on the right hand axis.
    </td>
 <tr>
    <td valign="top"> <h3>xy</h3> </td>
    <td><span class="mcode">plt(...,'xy',p]);<br></span>
    <span class="mcode">p</span> is a matrix that specifies new xy position and size coordinates
    for various graphical objects created by plt. <span class="mcode">p</span> has n rows and 5
    columns where n is the number of objects that are to be resized/repositioned. The first column
    of <span class="mcode">p</span> is an integer specifying the object (usually an axis) with 1
    representing the main axis. 2 normally represents the right hand axis although if there are
    any subplots they are numbered first with the right hand axis at the end. This is the same
    order as the axes are listed in the <span class="mcode">getappdata(gcf,'axis')</span> array.
    -1 and -2 represent the axis containing the traceIDs and menu box items respectively. The next
    four columns specify the desired position and size of the object [xleft ybottom width height]
    in either pixel or normalized units. For example:<br>
    <span class="mcode">plt(...,'xy',[-1 .01 .8 .12 .18; 1 .2 .16 .7 .8]);<br></span>
    will set the traceID box to normalized position [.01 .8 .12 .18] and set the main axis to
    normalized position [.2 .16 .7 .8]. If <span class="mcode">p</span> is a 1 by 4 vector it
    specifies the position of the main axis;
    i.e. <span class="mcode">plt(...,'xy',[x y w h])</span> is equivalent to
    <span class="mcode">plt(...,'xy',[1 x y w h])</span>.
    Although you can determine and enter these position coordinates manually, it is usually far
    easier to use the plt repositioning mode to determine the coordinates. See
    <a href="../Programming%20with%20plt/GUI%20building%20with%20plt.htm">GUI building with plt</a>
    to learn how this is done. Note that the <span class="mcode">xy</span> command may also be
    used to reposition the cursor objects (the 4 button group, edit boxes, labels, etc).
    </td>
  </tr>
  <tr>
    <td valign="top"> <h3>AxisPos</h3> </td>
    <td><span class="mcode">plt(...,'AxisPos',p);</span><br>
    Usually the size and position of the plot and TraceID box are modified using the
    <span class="mcode">xy</span> parameter described above, however <span class="mcode">AxisPos</span>
    provides an alternate method that is included primarily for backwards compatibility with
    older programs written before the xy parameter was added. (Usually the xy parameter is easier
    to use although on rare occasions the AxisPos parameter may be preferable.)
    <span class="mcode">p</span> is a 4 element vector that modifies the size and position of the 
    plot axis in the figure window. The first two elements modify the x and y 
    coordinates of the lower left corner of the axis. The last two elements 
    modify the axis width and height respectively. For example if
    <nobr><span class="mcode">p = [1 1 .9 1]</span></nobr>, the width of the plot will shrink 
    by 10%. If &nbsp;<nobr><span class="mcode">p = [1 2 1 .8]</span></nobr> then the space between 
    the bottom of the figure window and the bottom of the x-axis will double and 
    the plot height will shrink by 20%. Changing the size and position of the 
    axis is often useful when building applications to make room for additional 
    GUI objects. If p is a 5 element vector, the width of the trace ID box is 
    increased by a factor of p(5) to allow longer trace names. If p is an 8 
    element vector, the position of the trace ID box (xLeft,yBottom,width,height) 
    is multiplied by last four elements of p (i.e. p(5:8))
    </td>
  </tr>
  <tr>
    <td valign="top"> <h3>NewLimit<br>axisCB</h3> </td>
    <td><span class="mcode">plt(...,'NewLimit',s);<br> plt(...,'axisCB',s);</span><br>
    Evaluate string  <span class="mcode">s</span> when either the x or y-axis limits are changed. 
    These two terms (<span class="mcode">NewLimit</span> and <span class="mcode">axisCB</span>)
    are synonymous. This callback function can be 
    overwritten by the cursor command<span class="mcode"> plt('cursor',cid,'set','axisCB',fcn)</span>
    which is described in more detail in the <a href="Cursor%20commands.htm">cursor commands</a> section.
    At the top of that section there is also a table that describes the string substitutions that plt
    performs on the string before evaluating it. These substitutions can make the callback more powerful
    while using less code. In addition to a string, <span class="mcode">s</span> 
    may also be a function handle of the form <span class="mcode">@func</span> 
    or <span class="mcode">{@func,arg1,arg2,...,argn}</span>. Note that the 
    string substitutions can't be used with the function handle form of this parameter.
    </td>
  </tr>
  <tr>
    <td valign="top"> <h3>moveCB</h3> </td>
    <td><span class="mcode">plt(...,'moveCB',s);<br>
    </span>Evaluate string  <span class="mcode">s</span> whenever the cursor is moved. This callback function can be 
    overwritten by the the cursor command<span class="mcode"> plt('cursor',cid,'set','moveCB',fcn)</span>
    which is described in more detail in the <a href="Cursor%20commands.htm">
    cursor commands</a> section. The <span class="mcode">moveCB</span> is not 
    really an axis property, but is included in this section because of the 
    parallels with the above <span class="mcode">axisCB</span> parameter. As 
    with the axisCB parameter, the string substitutions are performed before evaluation.
    You may use function handles as well, but the string substitutions won't work for that form.
    </td>
  </tr>
  <tr>
    <td valign="top"> <h3>ENApre</h3> </td>
    <td><span class="mcode">plt(...,'ENApre',[ENAx ENAy]);</span><br>
    &nbsp; &nbsp; &nbsp;&nbsp; ENAx or ENAy = 0 to disable metric prefixes on the x/y axis.<br>
    &nbsp; &nbsp; &nbsp;&nbsp; ENAx or ENAy = 1 to enable metric prefixes on the x/y axis (default).<br>
    When metric prefixes are enabled plt will choose the best unit for the 
    respective axis. As an example, suppose the x-axis label is 'seconds' and 
    the x-axis data is <nobr>[0 1 2 3 4 5]*1e-8</nobr>. With metric prefixes disabled, the 
    x-axis tick-labels and cursor readout will be in scientific notation. With 
    metric prefixes enabled, the x-axis label will change to &quot;nano-seconds&quot; and 
    scientific notation will no longer be required making the graph and cursors 
    far more readable. (Note: metric prefixes are not used on the right hand axis).
    </td>
  </tr>
  <tr>
    <td valign="top"> <h3>AxisLink</h3> </td>
    <td><span class="mcode">plt(...,'AxisLink',m);</span><br>
    Tells plt to start with the left/right axes linked if m=1 or unlinked 
    if m=0. For more details about linking the axes, see the
    <a href="../Using%20the%20plt%20window/Right%20hand%20axis.htm">right hand axis</a> section.
  </tr>
  <tr>
    <td valign="top"> <h3>+AxisProp<br>-AxisProp<br>&lt;LabelProp<br>&gt;LabelProp<br>.LabelProp</h3> </td>
    <td>If a property name is prefixed with a
    <span class="mcode">+</span> or a <span class="mcode">-</span> character then the property value will be 
    applied to the left or right hand axis respectively. If a property name is prefixed with a
    <span class="mcode">&gt;</span>, <span class="mcode">&lt;</span> or a <span class="mcode">.</span>
    character then the property value will be applied to the left hand axis label, right hand axis label,
    or x axis label respectively.
    <br><br>
    <span class="mcode">plt(...,'+Ycolor',[0 0 1],'-Yscale','Log');</span><br>
    In this example plt will assign the value
    <nobr><span class="mcode">[0 0 1]</span> (blue)</nobr> to the
    <span class="mcode">Ycolor</span> property of the main (left hand) axis, and 
    it will apply the value <span class="mcode">'Log'</span> to the
    <span class="mcode">Yscale </span>property of the right hand axis. The plus 
    and minus signs are called a property prefix characters and&nbsp; are required so that plt 
    knows which axis you want to modify.
    <br><br>
    <span class="mcode">plt(...,'&gt;FontName','Lucida Handwriting');</span><br>
    In this example the font used for the right hand axis label is changed to Lucida Handwriting.
    <br><br>
    <span class="mcode">plt(...,'+&lt;.FontSize',13);</span><br>
    This example shows that more than one property prefix character may be included in front of a property name.
    In this case, the font size for the left hand axis tick labels, the left y-label, and the x-label are increased to 13.
    <br><br>
    The example program <span class="mcode">demo\pub.m</span> demonstrates the use of these prefix 
    characters. Note that if a property name appears without one of these 5 leading prefix 
    characters (<span class="mcode">&lt;&gt;.+-</span>), then property value will 
    be assigned to all the lines that have been defined so far in the argument list.
    </td>
  </tr>
  <tr>
    <td valign="top"> <h3>SubPlot</h3> </td>	
    <td><span class="mcode">plt(...,'SubPlot',v);</span><br>
    Normally plt puts all the defined traces on a single plot (which may 
    have left and right hand y-axes) that fills most of the figure area. However 
    with the SubPlot parameter you can tell plt to create several plots in the 
    same figure. All the plots are arranged in either one or two columns. All 
    plots in a column must use the same x-axis. The subplot in the lower left 
    corner has a special designation (the main plot) since that is the only plot 
    that includes a traceID box. Also some of the cursoring features are only 
    available on the main plot (peak/valley finder, delta cursors, expansion 
    history, the Mark/Zout/LinX/LinY tags, and the x-axis slider. Each subplot 
    however has its own y-axis cursor readout. These cursor readouts are easy to 
    identify since its background color matches the trace and axis colors. The 
    full panning and zooming features of plt are supported for each subplot. When 
    any subplot is panned or zoomed in the x-axis, all the x-axis limits of all 
    the other subplots in the same column are set to match the newly chosen 
    values.
    <br><br>
    <b><font size="+1">Single column<br></font></b>
    To create a single column of plots (all using the same x axis), 
    the subplot argument consists of n positive numbers, where n is the number 
    of plots desired. Each number specifies the percent of the area to be 
    occupied by each plot (starting from the bottom). Normally the sum of the 
    array should be 100, although if the sum is less than 100, there will be 
    some unused space at the top of the figure. For example,
    <nobr><span class="mcode">'SubPlot',[40 30 15 15]</span></nobr> tells plt to create 
    four plots. The bottom one (the &quot;main&quot; plot) will us up 40% of the available 
    height. The plot above that will use 30% of the height, and the remaining 
    two will take 15% each. Each subplot except the main (lower) plot is normally
    assigned a single trace, with the last trace defined appearing in the upper 
    most axis, the second to last trace appearing in the axis below that, etc. 
    For example, the command
    <nobr><span class="mcode">plt(1:50,rand(7,50),'SubPlot',[40 30 15 15])</span></nobr>
    will create 7 random traces, with the first four traces displayed on the main 
    (lower) plot (with a traceID box containing four labels) and the last 3 
    traces are displayed in the other three subplots. The example script
    <span class="mcode">demo\subplt.m</span> demonstrates the use of single 
    column subplots. Usually only the main plot may contain multiple traces, 
    although the <span class="mcode">SubTrace</span> parameter (see below) allows you to 
    change this behavior.
    <br><br>
    <b><font size="+1">Dual column<br></font></b>
    The example script
    <span class="mcode">demo\subplt8.m</span> demonstrates the use of dual 
    column subplots. To create two columns of plots, insert a negative number 
    into the subplot argument. The number of entries to the left of the negative 
    number indicates how many plots will appear in the left column, and 
    likewise, the number of entries to the right of the negative number 
    indicates the number of plots in the right column. The negative number 
    itself specifies the width (in percent) of the left column. Some examples 
    will help clarify. In all the examples below, assume that
    <nobr><span class="mcode">y = [a b c d e f]</span></nobr> where a through f are column
    vectors of the same length as x.
    <br><br>
    <nobr><span class="mcode">plt(x,y,'SubPlot',[100 -60 100],'Right',[2 3]);</span></nobr><br>
    The subplot parameters tells plt to create two plots both of which fill the 
    entire height available in the plotting area of the figure. The left (main) 
    plot fills 60% of the width with the second plot filling the remaining 40%. 
    Since six traces are defined, the first five traces (a through e) appear on the 
    main plot and the last trace (f) appears on the right plot. Since the 
    TraceID parameter was not included, the TraceID box next to the main plot 
    will contain the default trace labels (Line1 thru Line5). To label the 
    traces more informatively, a parameter such as
    <nobr><span class="mcode">'TRACEid',{'a' 'b' 'c' 'd' 'e'}</span></nobr>
    could be added to the plt argument list. Since the 'Right' parameter 
    was included, the main plot will include both right and left axes, with the 
    2nd and 3rd traces (b and c) on the right and the remaining three traces (a,d,e) 
    on the left. The left and right axes will be separated by enough space to 
    leave room for the axis labels, and this space will be increased when the 
    'Right' parameter is used so that there is room for an axis label on the 
    right side of the main (i.e. left) axis. However if you would like to 
    increase or decrease the amount of space between the two columns you can do 
    this by modifying the width argument. As an example, suppose as above you 
    still want the left plot to occupy 60% of the available width, but you want 
    to increase the spacing between the two axes by 2.3% of the figure window 
    width. To do that you would use
    <nobr><span class="mcode">'SubPlot',[100 -60.023 100]</span></nobr>. And for another 
    example, if you wanted to decrease the spacing by 3% of the figure width you would use
    <nobr><span class="mcode">'SubPlot',[100 -60.97 100]</span></nobr>.
    <br><br>
    <nobr><span class="mcode">plt(x,y,'SubPlot',[50 30 20 -55 70 20]);</span></nobr><br>
    In this example three plots will be created in the left column which fills 55% of the width of the 
    plotting area. The main plot on the bottom (containing traces a &amp; b) fills 
    50% of the height, the middle plot (trace c) fills 30% and the top plot 
    (trace d) fills the remaining 20% of the height. Two plots are created in 
    the right column which fills the remaining 45% of the width. The lower of 
    these (trace e) fills 70% of the height, and the upper (trace f) fills 20%, 
    with the upper 10% remaining blank. Note that both traces in the main plot 
    use the left-hand axis since no 'Right' parameter was given and no limits or 
    labels were specified for the right-hand axis. (With this many subplots it's 
    best not to use a right-hand axis since it makes all the subplots 
    significantly narrower to make room for the right-hand axis ticks and 
    labels.)
    <br><br>
    <nobr><span class="mcode">plt(x,y,'LabelX',{'meters' 'pascals'},'Ylim'{[0 5] [0 .1]});</span></nobr><br>
    Even though the subplot argument is not included here, plt 
    will split the plot horizontally as if you had included
    <nobr><span class="mcode">'SubPlot',[100 50 100]</span></nobr>
    in the argument list. This is because two different x-axis labels are 
    specified with the 'LabelX' parameter and the only time this is needed is 
    for two column subplots. The right column plot will contain trace f and the 
    left column (main) plot will contain traces a thru e. Since two y-axis 
    limits are specified, plt will put both left and right axes on the main 
    plot. In this example the 'Right' parameter is not included, so plt will 
    default to putting the last trace of the main plot (trace e) on the right 
    axis with the other four traces on the left axis. (Be careful not to confuse 
    the concepts of the right and left axes of the main plot, with the right and 
    left columns of subplots.) Also remember that the 'Ylim' parameter can't
    specify axis limits for a subplot. To set the y-axis limits for the subplots, use the set 
    command with the axis handles obtained from getappdata(gcf,'axis') or use the
    <nobr><span class="mcode">plt('cursor',cid,'set','position',p)</span></nobr>
    command described <a href="Cursor%20commands.htm">here</a>.
    </td>
  </tr>
  <tr>
    <td valign="top"> <h3>SubTrace</h3> </td>
    <td>When using subplots, it is important to understand that the default behavior 
    is to allow only a single trace on each subplot except for the main axis 
    (lower left). The main reason for this is to allow plt to provide a simple 
    cursoring mechanism which allows every trace to be cursored. However there 
    are two situations where you may want to change this default behavior. The 
    first is where cursoring is disabled (usually because the plot is to be 
    used for publication instead of for data exploration). Since cursoring is 
    not an issue, there is no reason to stick with the default behavior 
    for assigning the traces to the axes. The second plot in the script
    <span class="mcode">demo\pub.m</span>&nbsp; is an example of how the
    <span class="mcode">SubTrace</span> parameter might by used in this 
    situation. The second situation where you might want to use this parameter 
    is when you plan on modifying the cursor behavior to make sense for the 
    particular trace arrangement you have in mind. This requires a detailed 
    understanding of plt's cursoring commands, but is doable when the trace 
    configuration and desired cursoring scheme are reasonably simple.An example 
    of this second situation can be found in the script
    <span class="mcode">demo\weight.m</span>.<p>There are two ways to use this 
    parameter to assign the traces to the various subplots. For either method 
    you must know how plt numbers the axes. Axis number one is always the main 
    axis (lower left). Then axis two is the one directly above the main axis and 
    axis three is the one above that, continuing to the top of the left column. 
    Then the lowest axis of the second column (if it exists) is assigned to the 
    next number, and continuing upwards as before. Finally after all the 
    subplots have been assigned a number in this manner, the right hand axis of 
    the main plot (if it exists) is assigned to the next higher integer.</p>
    <p>Suppose for example, you have 4 axes and 9 traces and that you want 
    to put two traces on each of the first 3 axes and then put the remaining 3 
    traces on the last axis. You could do this with
    <nobr><span class="mcode">'SubTrace',[2 2 2 3]</span></nobr>. Instead of specifying how 
    many traces are on each axis, an alternate way of doing this is to specify 
    which axis each trace goes on. So an equivalent to the previous parameter 
    you could use
    <nobr><span class="mcode">'SubTrace',[1 1 2 2 3 3 4 4 4]</span></nobr>. Of course this 
    second method is always going to be longer than the first method, so you 
    would likely only use it if you needed to assign the traces to the axes
    in a different order, for example
    <nobr><span class="mcode">'SubTrace',[1 2 3 1 2 3 4 4 4]</span></nobr>.
    </td>
  </tr>
</table>
</body>
</html>